---
# TCCC.ai System Configuration

# Input/Output Configuration
io:
  # Define available audio input sources
  input_sources:
    - name: "microphone"       # An arbitrary name for this source
      type: "pyaudio"         # Assumes a PyAudioSource implementation exists
      # Optional: Add specific device index or other params if needed
      # device_index: 0 
      # sample_rate: 16000
      # channels: 1
      # chunk_size: 1024
      
  # Specify the default input source to use
  default_input: "microphone"

  # Configuration for output streams (if any)
  stream_output:
    buffer_size: 10       # Max items in output buffer
    timeout_ms: 100       # Timeout for waiting on buffer

# Audio Processing Configuration (Example)
audio:
  sample_rate: 16000        # Target sample rate for processing
  channels: 1               # Target channels (mono)
  # Add other audio processing params like VAD settings if applicable

# STT Engine Configuration (Example - Check module for actual params)
stt_engine:
  model:
    type: "whisper"      # Assuming Whisper
    size: "tiny.en"      # Use a small, fast English model for testing
  streaming:
    enabled: True
  hardware:
    enable_acceleration: False # Set to true if GPU available and configured

# LLM Analysis Configuration (Example - Check module for actual params)
llm_analysis:
  model:
    primary:
      provider: "local_placeholder" # Assuming LLMEngine knows how to handle this
      name: "phi-2-mock"            # Example placeholder name
  hardware:
    enable_acceleration: False
  caching:
    enabled: True

# Data Store Configuration (Example)
data_store:
  db_path: "tccc_datastore.db"  # Path to the SQLite database file

# Document Library Configuration (Example)
document_library:
  storage_path: "documents/"    # Directory to store documents

# Processing Core Configuration (Example)
processing_core:
  analysis_threshold: 0.7     # Example parameter

# Add other module configurations as needed...
