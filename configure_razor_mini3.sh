#!/bin/bash
#
# Razer Seiren V3 Mini Configuration Script for TCCC.ai
# -----------------------------------------------------
# This script configures the Razer Seiren V3 Mini microphone 
# for optimal performance with the TCCC.ai system on Jetson Orin Nano.

# Set text colors
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
RESET="\033[0m"

echo -e "${BLUE}=========================================${RESET}"
echo -e "${BLUE}  TCCC.ai Razer Seiren V3 Mini Config   ${RESET}"
echo -e "${BLUE}=========================================${RESET}"
echo

# Check if we're running on a Jetson device
is_jetson=false
if grep -q "tegra\|nvidia" /proc/cpuinfo 2>/dev/null || nvidia-smi | grep -q "Orin" 2>/dev/null; then
    echo -e "${GREEN}[✓] Jetson Orin Nano platform detected${RESET}"
    is_jetson=true
else
    echo -e "${YELLOW}[!] Not running on a Jetson platform${RESET}"
    echo -e "    Some optimizations will not be available"
fi

# Function to detect Razer Seiren V3 Mini
function detect_razer_mini() {
    if arecord -l | grep -q "Razer Seiren V3 Mini"; then
        CARD_ID=$(arecord -l | grep "Razer Seiren V3 Mini" | awk -F'card ' '{print $2}' | awk '{print $1}')
        DEVICE_ID=$(arecord -l | grep "Razer Seiren V3 Mini" | awk -F'device ' '{print $2}' | awk '{print $1}')
        echo -e "${GREEN}[✓] Razer Seiren V3 Mini detected: card $CARD_ID, device $DEVICE_ID${RESET}"
        return 0
    else
        echo -e "${RED}[✗] Razer Seiren V3 Mini not detected${RESET}"
        echo -e "    Please ensure the microphone is connected and recognized by the system"
        return 1
    fi
}

# Function to configure ALSA for Razer Mini
function configure_alsa() {
    local card_id=$1
    local device_id=$2
    local sample_rate=$3
    local bit_depth=$4
    local channels=$5
    
    if [ -z "$card_id" ] || [ -z "$device_id" ]; then
        echo -e "${RED}[✗] Missing required card or device ID${RESET}"
        return 1
    fi
    
    # Set format string based on bit depth
    if [ "$bit_depth" == "24" ]; then
        format="S24_LE"
    elif [ "$bit_depth" == "16" ]; then
        format="S16_LE"
    else
        echo -e "${YELLOW}[!] Unsupported bit depth: $bit_depth. Using 24-bit.${RESET}"
        format="S24_LE"
        bit_depth=24
    fi
    
    # Create ALSA configuration
    ASOUNDRC="$HOME/.asoundrc"
    echo -e "${BLUE}[i] Creating ALSA configuration at $ASOUNDRC${RESET}"
    
    cat > $ASOUNDRC << EOF
# TCCC.ai optimized configuration for Razer Seiren V3 Mini
# Generated by configure_razor_mini3.sh

pcm.!default {
    type hw
    card $card_id
    device $device_id
}

ctl.!default {
    type hw
    card $card_id
}

# High-quality recording settings for TCCC
pcm.tccc_mic {
    type hw
    card $card_id
    device $device_id
    rate $sample_rate
    format $format
    channels $channels
}

# Config with optional noise reduction via dsnoop
pcm.tccc_mic_clean {
    type plug
    slave.pcm {
        type dsnoop
        ipc_key 5678293
        card $card_id
        device $device_id
        rate $sample_rate
        format $format
        channels $channels
    }
}
EOF
    
    if [ -f "$ASOUNDRC" ]; then
        echo -e "${GREEN}[✓] ALSA configuration created successfully${RESET}"
        echo -e "    Sample rate: ${BLUE}$sample_rate Hz${RESET}"
        echo -e "    Bit depth: ${BLUE}$bit_depth-bit${RESET}"
        echo -e "    Channels: ${BLUE}$channels${RESET}"
    else
        echo -e "${RED}[✗] Failed to create ALSA configuration${RESET}"
        return 1
    fi
    
    return 0
}

# Function to test microphone recording
function test_microphone() {
    local card_id=$1
    local device_id=$2
    local duration=3
    local test_file="/tmp/razor_mini_test.wav"
    
    echo -e "${BLUE}[i] Testing microphone recording for $duration seconds...${RESET}"
    echo -e "    Recording to $test_file"
    echo -e "    Please speak into the microphone"
    
    # 3-second countdown
    for i in {3..1}; do
        echo -e "${YELLOW}$i...${RESET}"
        sleep 1
    done
    
    # Record audio
    arecord -D hw:$card_id,$device_id -f S24_3LE -r 48000 -c 1 -d $duration $test_file > /dev/null 2>&1
    
    if [ -f "$test_file" ]; then
        local file_size=$(stat -c%s "$test_file")
        if [ $file_size -gt 1000 ]; then
            echo -e "${GREEN}[✓] Recording test successful ($(($file_size / 1024)) KB recorded)${RESET}"
            
            # Simple audio analysis if sox is available
            if command -v sox > /dev/null; then
                echo -e "${BLUE}[i] Analyzing audio quality...${RESET}"
                sox $test_file -n stat 2>&1 | grep -E "Maximum amplitude|RMS.*amplitude|Minimum amplitude|Rough frequency" | while read line; do
                    echo -e "    ${BLUE}$line${RESET}"
                done
            fi
            
            # Ask if user wants to play back the recording
            echo -ne "${YELLOW}Would you like to play back the recording? (y/n): ${RESET}"
            read -r play_back
            if [[ $play_back =~ ^[Yy]$ ]]; then
                echo -e "${BLUE}[i] Playing back recording...${RESET}"
                aplay $test_file
            fi
            
            return 0
        else
            echo -e "${RED}[✗] Recording test failed: File too small (${file_size} bytes)${RESET}"
            echo -e "    This might indicate the microphone is not capturing audio correctly"
            return 1
        fi
    else
        echo -e "${RED}[✗] Recording test failed: Could not create test file${RESET}"
        return 1
    fi
}

# Function to diagnose USB issues specific to Jetson
function diagnose_usb_issues() {
    echo -e "${BLUE}[i] Checking for USB issues on Jetson...${RESET}"
    
    # Check USB device list
    echo -e "${BLUE}USB devices:${RESET}"
    lsusb | grep -v "Linux Foundation" | while read line; do
        echo -e "    $line"
    done
    
    # Check for USB power issues
    if dmesg | grep -i "usb" | grep -i "over-current\|disconnect" > /dev/null; then
        echo -e "${RED}[✗] USB power issues detected in dmesg${RESET}"
        echo -e "    Consider using a powered USB hub or different USB port"
    else
        echo -e "${GREEN}[✓] No USB power issues detected${RESET}"
    fi
    
    # Check for USB bandwidth issues
    if dmesg | grep -i "usb" | grep -i "bandwidth\|allocation" > /dev/null; then
        echo -e "${YELLOW}[!] USB bandwidth issues detected${RESET}"
        echo -e "    Consider using different USB ports for your devices"
    else
        echo -e "${GREEN}[✓] No USB bandwidth issues detected${RESET}"
    fi
}

# Main function
function main() {
    # Default settings
    SAMPLE_RATE=48000
    BIT_DEPTH=24
    CHANNELS=1
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --sample-rate)
                SAMPLE_RATE="$2"
                shift 2
                ;;
            --bit-depth)
                BIT_DEPTH="$2"
                shift 2
                ;;
            --channels)
                CHANNELS="$2"
                shift 2
                ;;
            --help)
                echo "Usage: $0 [options]"
                echo "Options:"
                echo "  --sample-rate RATE   Set sample rate (default: 48000)"
                echo "  --bit-depth DEPTH    Set bit depth (16 or 24, default: 24)"
                echo "  --channels COUNT     Set channel count (default: 1)"
                echo "  --help               Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    echo -e "${BLUE}[i] Using configuration:${RESET}"
    echo -e "    Sample rate: ${BLUE}$SAMPLE_RATE Hz${RESET}"
    echo -e "    Bit depth: ${BLUE}$BIT_DEPTH-bit${RESET}"
    echo -e "    Channels: ${BLUE}$CHANNELS${RESET}"
    
    # Step 1: Detect the Razer Seiren V3 Mini
    if ! detect_razer_mini; then
        echo -e "${YELLOW}[!] Installation will continue but may not work correctly${RESET}"
        
        # Try to help diagnose the issue
        if $is_jetson; then
            diagnose_usb_issues
        fi
        
        # Ask if user wants to continue
        echo -ne "${YELLOW}Would you like to continue anyway? (y/n): ${RESET}"
        read -r continue
        if [[ ! $continue =~ ^[Yy]$ ]]; then
            echo -e "${RED}[✗] Installation aborted${RESET}"
            exit 1
        fi
        
        # Prompt for manual card/device ID entry
        echo -ne "${YELLOW}Enter sound card ID manually: ${RESET}"
        read -r CARD_ID
        echo -ne "${YELLOW}Enter device ID manually: ${RESET}"
        read -r DEVICE_ID
    fi
    
    # Step 2: Configure ALSA
    if configure_alsa "$CARD_ID" "$DEVICE_ID" "$SAMPLE_RATE" "$BIT_DEPTH" "$CHANNELS"; then
        echo -e "${GREEN}[✓] ALSA configuration completed successfully${RESET}"
        
        # Check for pulseaudio and configure if needed
        if command -v pulseaudio > /dev/null; then
            echo -e "${BLUE}[i] PulseAudio detected, configuring...${RESET}"
            # Add PulseAudio configuration if needed
            # This is not typically needed on Jetson, but included for completeness
        fi
    else
        echo -e "${RED}[✗] ALSA configuration failed${RESET}"
    fi
    
    # Step 3: Test the microphone
    echo -e "${BLUE}[i] Testing the microphone configuration...${RESET}"
    if test_microphone "$CARD_ID" "$DEVICE_ID"; then
        echo -e "${GREEN}[✓] Microphone test passed successfully${RESET}"
    else
        echo -e "${RED}[✗] Microphone test failed${RESET}"
        echo -e "    Please check your hardware connections and try again"
    fi
    
    # Step 4: Create environment variables for TCCC
    TCCC_ENV_FILE="$HOME/tccc_audio_env.sh"
    echo -e "${BLUE}[i] Creating environment variables for TCCC.ai${RESET}"
    
    cat > $TCCC_ENV_FILE << EOF
#!/bin/bash
# TCCC.ai audio environment variables
# Generated by configure_razor_mini3.sh

export TCCC_AUDIO_CARD=$CARD_ID
export TCCC_AUDIO_DEVICE=$DEVICE_ID
export TCCC_AUDIO_RATE=$SAMPLE_RATE
export TCCC_AUDIO_FORMAT=$([ "$BIT_DEPTH" == "24" ] && echo "S24_LE" || echo "S16_LE")
export TCCC_AUDIO_CHANNELS=$CHANNELS
EOF
    
    chmod +x $TCCC_ENV_FILE
    
    echo -e "${GREEN}[✓] Environment variables created at $TCCC_ENV_FILE${RESET}"
    echo -e "    Source this file in your shell to use the variables:"
    echo -e "    ${BLUE}source $TCCC_ENV_FILE${RESET}"
    
    # Final step: Provide information about the Razer Seiren V3 Mini
    echo -e "\n${BLUE}[i] Razer Seiren V3 Mini Information:${RESET}"
    echo -e "    - Cardioid polar pattern optimized for speech"
    echo -e "    - 25mm condenser capsule optimized for voice"
    echo -e "    - High-quality ADC with up to 48kHz/24-bit support"
    echo -e "    - Built-in shock mount reduces vibration noise"
    echo -e "    - Mute button on top of the microphone (check if muted if no audio detected)"
    
    echo -e "\n${GREEN}[✓] Configuration completed successfully${RESET}"
    echo -e "    The Razer Seiren V3 Mini is now configured for optimal use with TCCC.ai"
    echo -e "    To test with the TCCC.ai system, run: python -m tccc.audio_pipeline.audio_pipeline"
}

# Run the main function
main "$@"